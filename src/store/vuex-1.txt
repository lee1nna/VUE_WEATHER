1. Vuex란?
Vue.js의 상태관리를 위한 패턴이자 라이브러리이다. 다른 상태관리패턴이나 라이브러리와 비교했을 때,
뷰의 반응성(Reactivity)체계를 효율적으로 활용하여 화면을 업데이트 한다는 차이점이 있다.

2. 상태관리(State Management)가 왜 필요한가?
컴포넌트 기반 프레임워크에서는 작은 단위로 쪼개진 여러 개의 컴포넌트로 화면을 구성한다. 예를들면, header, button, list 등의 화면 요소가
각각 컴포넌트로 구성되어 한 화면에서 많은 컴포넌트를 사용한다.
이에 따라 컴포넌트 간의 통신이나 데이터 전달을 좀 더 유기적으로 관리할 필요성이 생긴다.

3. 상태관리란?
상태관리란 여러 컴포넌트 간의 데이터 전달과 에빈트 통신을 한 곳에서 관리하는 패턴을 의미한다.
뷰와 성격이 비슷한 프레임워크 리액트(React)에서는 Redux, Mobx와 같은 상태 관리 라이브러리를 사용하고 있고,
뷰에서는 Vuex라는 상태관리 라이브러리를 사용한다.

4. 상태관리로 해결할 수 있는 문제점은?
상태관리는 중대형 규모의 웹 애플리케이션에서 컴포넌트 간에 데이터를 더 효율적으로 전달할 수 있다.
일반적으로 앱의 규모가 커지면서 생기는 문제점들은 다음과 같다.

  4-1. 뷰의 컴포넌트 통신방식인 props, event emit 때문에 중간에 거쳐야 할 컴포넌트가 많아지거나,
  4-2. 이를 피하기 위해 Event Bus를 사용하여 컴포넌트 간 데이터 흐름을 파악하기 어려운 것

이러한 문제점을 해결하기 위해 모든 데이터 통신을 한 곳에서 중앙 집중식으로 관리하는 것이 상태관리이다.

// namedspaced : 하나의 store에서 모듈화되어 사용될 수 있음을 명시적으로 나타내는 개념
// getters : 계산된 상태를 만들어내는 속성, computed와 유사하다.
// 실제 데이터를 계산된 형태로 바꾸어 새롭게 활용할 수 있다.

// mutations, actions : methods와 유사하다.
// 1. mutations: 변이 - 우리가 관리하는 데이터를 변경시켜줄 수 있다.
// 즉 state 안의 데이터는 오로지 mutaions에서만 데이터를 변경할 수 있다.

// 2. actions :특정한 데이터를 직접적으로 수정하는 것이 허용되지 않는다.
// 위 사항이 가장 주의해야 할 사항이고, 또한 비동기로 동작한다는 점에도 유의해야한다.
// async, await
// actions부분에선 mutaions처럼 state를 바로 불러올 순 없고,
// context라는 객체데이터를 가지고 와서, context를 참조하여 데이터를 불러온다.
// context: state, getters, mutations을 활용할 수 있는 내용이 들어있다.
// mutations을 불러오기 위해선 context.mutations가 아니라 context.commit을 활용한다.

searchData({ context }) {
  context.state, context.getters, context.commit;
},

// 객체 구조분해하여 같은 방법으로 불러올 수 있다.
// searchData({ state, getters, commit }, payload) {},
// 두 번째 매개변수 자리 (payload): 함수가 실행될 때, 인수로 들어온 특정한 데이터를 payload 자리에 받는다.

----------------------------------------------------------------------------------------------------

1. Store 동작 예시

빵을 만드는 공장이 있다.
여기서 공장은 Store(저장소) 역할이 된다.

[목표]
빵을 만들기 위해 밀가루를 가져와야 한다.

[진행순서]
- state(상태)
"밀가루를 정한다."
=> 밀가루는 state(상태) 즉, 하나의 변화할 수 있는 상태가 된다.

- actions(액션)
"밀가루를 상점에서 가져와야한다."
=> 이 과정은 서버를 이용해 DB에서 데이터를 가져오는 과정이다.

"밀가루를 공장에 넣는다."
=> 이 과정은 state(상태)를 변경하기 위해서 Actions(액션) 내에서 mutations(변이)을/를 선언한 것이다.

- mutations(변이)
"밀가루를 이용해 빵을 만든다."
=> 이 과정은 밀가루라는 state(상태)를 mutations(변이) 시키는 과정이다.

- getters/computed (계산된 데이터)
"완성된 빵을 가져온다."
=> 이 과정은 뷰 컴포넌트에서 가공된 state를 가져오는 과정이다.

----------------------------------------------------------------------------------------------------

위에서도 설명했지만, 다시 한 번 Vuex 구성요소를 살펴보자.

1. state
- Vue 컴포넌트의 원본 소스 역할인 data로 볼 수 있다.
- state는 mutations을 통해서만 data 변경하는 것을 권장한다.
- 컴포넌트 내에서는 [this.$store.state.상태명] 으로 호출한다.

2. mutations
- state(상태)를 변경하는 방법이며, 메서드 역할은 한다.
- 동기적으로 수행된다.
- 컴포넌트에서는 [this.$store.commit('변이명')] 으로 호출한다.
- 전달 값이 있다면 [this.$store.commit('변이명', payload)] 로 호출한다.

3. actions
- api 호출과 그 결과에 대해서 return 및 mutations(변이) 을/를 사용한다.
- 비동기적으로 수행된다.
- 컴포넌트에서는 [this.$store.dispatch('액션명')] 으로 호출한다.
- 전달 값이 있다면 [this.$store.dispatch('액션명', payload)] 로 호출한다.

4. getter
- Vue 컴포넌트에서의 computed처럼 계산된 값을 return 하는 속성이다.
- state(상태)에 대한 연산을 하고 그 결과를 view에 바인딩이 가능하다.
- state(상태)가 변경되면, view에 업데이트 되어 반영된다.

----------------------------------------------------------------------------------------------------

1. Vuex refresh(새로고침) 문제점
- Vuex에는 가장 큰 문제점이 있다. 새로고침 시, store들의 상태들이 기본 값으로 초기화된다.
이를 방지하기 위해 vuex-persistedstate 라는 npm이 존재하고,
Vuex에 저장되는 값들을 웹 브라우저의 localstorage에 저장하며, 새로고침시 그 값이 존재하면 localstorage의 값을 가져와 사용되는 원리이다.

// 설치 : npm install --save vuex-persistedstate
// 주소 : npmjs.com/package/vuex-persistedstate
// 활용 : 
import { createStore } from 'vuex';
import createPersistedState from 'vuex-persistedstate';

const store = createStore({
  // ...
  plugin: [createPersistedState()]
})

- 모든 store 값들이 모두 localstorage에 저장되어, 가벼운 웹일 경우는 상관없지만, 사용량이 많아지면 속도에 큰 지장이 있다.
이를 해결할 방법으로는 vuex-persistedstate의 원하는 값만 store에 저장시킬 수 있는 옵션이 존재한다.

'path' 라는 옵션을 통해 배열 안에 넣는 store만 localstorage에 저장된다.
( 이외에도 vuex-persistedstate 에서는 js-cookie, secure-ls를 이용하여 localstorage 말고도, cookie에 저장하는 방식과
암호화된 방식으로 데이터를 저장하는 방법을 알려주고 있으니 관심있으면 npm에 접속을 추천한다. )
